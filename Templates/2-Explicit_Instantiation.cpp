
#include <iostream>
/*
Explicit instantiations are used to instruct the compiler to generate the code for a specific instantiation of a template.
It is typically used when you want to separate the declaration of a template from its definition,
and you want to explicitly tell the compiler to generate the code for a specific set of template arguments.
The compiler generates the code for the explicit instantiation at compile-time, reducing the
compile-time overhead by instantiating the template only once.
Explicit instantiations are useful when you want to reduce code bloat by avoiding redundant instantiations of templates.
Example:
*/

// Template declaration
template <typename T>
void Print(T value);

// Template definition
template <typename T>
void Print(T value)
{
    std::cout << value << std::endl;
}

// Explicit instantiation
template void Print<int>(int value);

int main()
{
    // The code for Print<int> has been generated by explicit instantiation
    Print(42);
    return 0;
}